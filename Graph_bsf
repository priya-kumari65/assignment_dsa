#include <iostream>
#include <vector>
#include <map>
#include <queue>
#include <set>

using namespace std;

void bfs(int start, map<int, vector<int>>& adjList) {
    queue<int> q;
    set<int> visited;

    q.push(start);
    visited.insert(start);

    cout << "BFS Traversal: ";
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        cout << current << " ";

        for (int neighbor : adjList[current]) {
            if (visited.find(neighbor) == visited.end()) {
                q.push(neighbor);
                visited.insert(neighbor);
            }
        }
    }
    cout << endl;
}

int main() {
    vector<pair<int, int>> pairs = {
        {1, 2},
        {1, 3},
        {2, 4},
        {3, 4}
    };

    map<int, vector<int>> adjList;
    for (auto edge : pairs) {
        int u = edge.first, v = edge.second;
        adjList[u].push_back(v);
        if (adjList.find(v) == adjList.end()) {
            adjList[v] = vector<int>(); // ensure all nodes are in the map
        }
    }

    int startNode = 1;
    bfs(startNode, adjList);

    return 0;
}
